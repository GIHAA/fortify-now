Directory structure:
└── fortify-now/auth-service/
    ├── middleware/
    │   └── protect.js
    ├── repository/
    │   └── userRepo.js
    ├── db.sql
    ├── test/
    │   └── userService.test.js
    ├── config/
    │   └── database.js
    ├── dockerfile
    ├── utils/
    │   └── logger.js
    ├── models/
    │   ├── FarmerDetails.js
    │   ├── User.js
    │   └── AccessibilitySettings.js
    ├── logs/
    ├── package.json
    ├── service/
    │   └── userService.js
    ├── controllers/
    │   └── userController.js
    ├── routes/
    │   └── authRoutes.js
    └── app.js

================================================
File: /middleware/protect.js
================================================
const jwt = require("jsonwebtoken");

const protect = (req, res, next) => {
  const token = req.header("Authorization");

  if (!token) {
    return res.status(401).json({ message: "No token, authorization denied" });
  }

  try {
    // Remove 'Bearer ' prefix from the token if present
    const jwtToken = token.startsWith("Bearer ") ? token.slice(7) : token;

    // Verify the JWT token
    jwt.verify(jwtToken, "your_jwt_secret", (err, decoded) => {
      if (err) {
        return res.status(403).json({ message: "Token is not valid" });
      }

      // Set the user ID in the request object
      req.user = { id: decoded.id };
      console.log("User ID:", req.user.id);
      next();
    });
  } catch (err) {
    return res.status(500).json({ message: "Server error" });
  }
};

module.exports = protect;


================================================
File: /repository/userRepo.js
================================================
// repository/userRepo.js
const bcrypt = require("bcryptjs");
const User = require("../models/User");
const FarmerDetails = require("../models/FarmerDetails");
const AccessibilitySettings = require("../models/AccessibilitySettings");

// Function to find a user by email
const findUserByEmail = async (email) => {
  return await User.findOne({ where: { email } });
};

// Function to create a new user
const createUser = async (username, email, hashedPassword , role) => {
  return await User.create({ username, email, password_hash: hashedPassword , role });
};

// Function to create farmer details
const createFarmerDetails = async (userId, age, visionProblems, colorBlindness , lat , long) => {
  return await FarmerDetails.create({ user_id: userId, age, vision_problems: visionProblems, color_blindness: colorBlindness , lat , long });
};

// Function to create accessibility settings
const createAccessibilitySettings = async (userId, textSize, layout, colorScheme, useSymbols) => {
  return await AccessibilitySettings.create({
    user_id: userId,
    text_size: textSize,
    layout,
    color_friendly_scheme: colorScheme,
    use_symbols_with_colors: useSymbols,
  });
};

// Function to get user preferences
const getUserPreferences = async (userId) => {
  return await AccessibilitySettings.findOne({ where: { user_id: userId } });
};


// find all users
// userRepo.js
const findAllUsers = async (page = 1, limit = 10) => {
  const offset = (page - 1) * limit;
  
  const { count, rows } = await User.findAndCountAll({
    attributes: ['id', 'username', 'email', 'role'],
    limit: limit,
    offset: offset,
    order: [['createdAt', 'DESC']] // Optional: sort by creation date
  });

  return {
    users: rows,
    totalUsers: count,
    totalPages: Math.ceil(count / limit),
    currentPage: page
  };
};

// Find user by ID with associated data if FARMER
const findUserById = async (userId) => {
  const user = await User.findByPk(userId, {
    attributes: ['id', 'username', 'email', 'role']
  });

  if (user && user.role === 'FARMER') {
    const farmerDetails = await FarmerDetails.findOne({
      where: { user_id: userId }
    });
    const accessibilitySettings = await AccessibilitySettings.findOne({
      where: { user_id: userId }
    });
    
    return {
      ...user.toJSON(),
      farmerDetails,
      accessibilitySettings
    };
  }

  return user;
};

// Update user and related details if FARMER
const updateUser = async (userId, updateData) => {
  const user = await User.findByPk(userId);
  if (!user) return null;

  const {
    username,
    email,
    age,
    vision_problems,
    color_blindness,
    text_size,
    layout,
    color_friendly_scheme,
    use_symbols_with_colors
  } = updateData;

  // Update basic user info
  if (username || email) {
    await user.update({
      username: username || user.username,
      email: email || user.email
    });
  }

  // If user is a farmer, update farmer-specific details
  if (user.role === 'FARMER') {
    if (age || vision_problems !== undefined || color_blindness !== undefined) {
      await FarmerDetails.update(
        {
          age: age || undefined,
          vision_problems: vision_problems !== undefined ? vision_problems : undefined,
          color_blindness: color_blindness !== undefined ? color_blindness : undefined
        },
        { where: { user_id: userId } }
      );
    }

    if (text_size || layout || color_friendly_scheme || use_symbols_with_colors !== undefined) {
      await AccessibilitySettings.update(
        {
          text_size: text_size || undefined,
          layout: layout || undefined,
          color_friendly_scheme: color_friendly_scheme || undefined,
          use_symbols_with_colors: use_symbols_with_colors !== undefined ? use_symbols_with_colors : undefined
        },
        { where: { user_id: userId } }
      );
    }
  }

  // Return updated user with all related data
  return await findUserById(userId);
};

// Add to exports
module.exports = {
  findUserByEmail,
  createUser,
  createFarmerDetails,
  createAccessibilitySettings,
  getUserPreferences,
  findAllUsers,
  findUserById,
  updateUser
};

================================================
File: /db.sql
================================================
-- Create Roles table for defining user roles
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_catalog.pg_tables WHERE schemaname = 'public' AND tablename = 'roles') THEN
        CREATE TABLE roles (
            id SERIAL PRIMARY KEY,
            role_name VARCHAR(50) NOT NULL UNIQUE
        );
        INSERT INTO roles (role_name) VALUES ('SUPER_ADMIN'), ('SEED_PROVIDER'), ('FARMER');
    END IF;
END $$;

-- Create Users table for basic user information
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'users') THEN
        CREATE TABLE users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) NOT NULL,
            email VARCHAR(255) NOT NULL UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            role_id INT NOT NULL DEFAULT 1, -- Default to 'superadmin' for the first user
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE SET NULL
        );
    END IF;
END $$;

-- Create Farmer Details table for farmer-specific data
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'farmer_details') THEN
        CREATE TABLE farmer_details (
            id SERIAL PRIMARY KEY,
            user_id INT NOT NULL,
            age INT NOT NULL,
            vision_problems BOOLEAN DEFAULT FALSE,
            color_blindness BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
    END IF;
END $$;

-- Create Accessibility Settings table for user preferences
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'accessibility_settings') THEN
        CREATE TABLE accessibility_settings (
            id SERIAL PRIMARY KEY,
            user_id INT NOT NULL,
            text_size TEXT CHECK (text_size IN ('Small', 'Medium', 'Large')) DEFAULT 'Medium',
            layout TEXT CHECK (layout IN ('Simple', 'Standard')) DEFAULT 'Standard',
            color_friendly_scheme TEXT CHECK (color_friendly_scheme IN ('Red-Green Safe', 'Blue-Yellow Safe', 'Standard')) DEFAULT 'Standard',
            use_symbols_with_colors BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
    END IF;
END $$;

-- Assign the first user as 'superadmin' role (role_id = 1)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM users) THEN
        INSERT INTO users (username, email, password_hash, role_id)
        VALUES ('Default Superadmin', 'admin@example.com', 'hashed_password', 1);
    END IF;
END $$;

================================================
File: /test/userService.test.js
================================================
// test/userService.test.js
const userService = require("../service/userService");
const userRepo = require("../repository/userRepo");
const FarmerDetails = require("../models/FarmerDetails");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// Mock dependencies
jest.mock("../repository/userRepo");
jest.mock("../models/FarmerDetails");
jest.mock("bcryptjs");
jest.mock("jsonwebtoken");

describe("User Service", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe("registerUser", () => {
    it("should successfully register a new user", async () => {
      const mockUser = {
        id: 1,
        username: "testuser",
        email: "test@test.com",
      };

      userRepo.findUserByEmail.mockResolvedValue(null);
      bcrypt.hash.mockResolvedValue("hashedPassword");
      userRepo.createUser.mockResolvedValue(mockUser);

      const result = await userService.registerUser(
        "testuser",
        "test@test.com",
        "password123"
      );

      expect(result).toEqual({
        success: true,
        data: { id: 1, username: "testuser", email: "test@test.com" },
        message: "User created successfully",
      });
      expect(bcrypt.hash).toHaveBeenCalledWith("password123", 10);
    });

    it("should return error for existing user", async () => {
      userRepo.findUserByEmail.mockResolvedValue({ id: 1 });

      const result = await userService.registerUser(
        "testuser",
        "test@test.com",
        "password123"
      );

      expect(result).toEqual({
        success: false,
        statusCode: 400,
        message: "User already exists",
      });
    });
  });

  describe("loginUser", () => {
    it("should successfully login user", async () => {
      const mockUser = {
        id: 1,
        email: "test@test.com",
        username: "testuser",
        password_hash: "hashedPassword",
      };

      const mockFarmer = {
        age: 30,
        vision_problems: false,
        color_blindness: false,
      };

      userRepo.findUserByEmail.mockResolvedValue(mockUser);
      FarmerDetails.findOne.mockResolvedValue(mockFarmer);
      bcrypt.compare.mockResolvedValue(true);
      jwt.sign.mockReturnValue("mockToken");

      const result = await userService.loginUser(
        "test@test.com",
        "password123"
      );

      expect(result).toEqual({
        success: true,
        data: {
          famer: {
            age: 30,
            color_blindness: false,
            vision_problems: false,
          },
          token: "mockToken",
          user: {
            email: "test@test.com",
            id: 1,
            username: "testuser",
          },
        },

        message: "Login successful",
      });
    });

    it("should return error for non-existent user", async () => {
      userRepo.findUserByEmail.mockResolvedValue(null);

      const result = await userService.loginUser(
        "test@test.com",
        "password123"
      );

      expect(result).toEqual({
        success: false,
        statusCode: 404,
        message: "User not found",
      });
    });

    it("should return error for invalid password", async () => {
      userRepo.findUserByEmail.mockResolvedValue({
        id: 1,
        password_hash: "hashedPassword",
      });
      bcrypt.compare.mockResolvedValue(false);

      const result = await userService.loginUser(
        "test@test.com",
        "wrongpassword"
      );

      expect(result).toEqual({
        success: false,
        statusCode: 400,
        message: "Invalid password",
      });
    });
  });

  describe("registerFarmer", () => {
    it("should successfully register a farmer with preferences", async () => {
      const mockUser = {
        id: 1,
        username: "farmer",
        email: "farmer@test.com",
      };

      userRepo.findUserByEmail.mockResolvedValue(null);
      bcrypt.hash.mockResolvedValue("hashedPassword");
      userRepo.createUser.mockResolvedValue(mockUser);
      userRepo.createFarmerDetails.mockResolvedValue({});
      userRepo.createAccessibilitySettings.mockResolvedValue({});

      const result = await userService.registerFarmer(
        "farmer",
        "farmer@test.com",
        "password123",
        30,
        false,
        false,
        "medium",
        "standard",
        true,
        true
      );

      expect(result).toEqual({
        success: true,
        data: { id: 1, username: "farmer", email: "farmer@test.com" },
        message: "Farmer registered successfully",
      });
    });
  });

  describe("getUserPreferences", () => {
    it("should return user preferences", async () => {
      const mockPreferences = {
        text_size: "large",
        layout: "compact",
        color_friendly_scheme: true,
        use_symbols_with_colors: true,
      };

      userRepo.getUserPreferences.mockResolvedValue(mockPreferences);

      const result = await userService.getUserPreferences(1);

      expect(result).toEqual({
        success: true,
        data: mockPreferences,
        message: "Preferences fetched successfully",
      });
    });

    it("should handle non-existent preferences", async () => {
      userRepo.getUserPreferences.mockResolvedValue(null);

      const result = await userService.getUserPreferences(1);

      expect(result).toEqual({
        success: false,
        statusCode: 404,
        message: "Preferences not found",
      });
    });
  });
});


================================================
File: /config/database.js
================================================
// config/database.js
const { Sequelize } = require("sequelize");
require("dotenv").config();
const logger = require("../utils/logger"); 

const sequelize = new Sequelize({
  host: process.env.DB_HOST || "localhost",
  port: process.env.DB_PORT || 5432,
  username: process.env.DB_USER || "admin",
  password: process.env.DB_PASSWORD || "admin",
  database: process.env.DB_NAME || "agri",
  dialect: "postgres",
  // for ssl
  dialectOptions: {
    ssl: {
      require: process.env.DB_SSL === 'true',
      rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED === 'true'
    }
  }
});

// Test the connection and log the result
const testConnection = async () => {
  try {
    await sequelize.authenticate();
    logger.info("Connection to the database has been established successfully.");
  } catch (error) {
    logger.error(`Unable to connect to the database: ${error.message}`);
  }
};

testConnection();

module.exports = sequelize;


================================================
File: /dockerfile
================================================
# Use an official Node.js runtime as a parent image
FROM node:16

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose the port that the app will run on (port 5000 internally)
EXPOSE 5000

# Run the app
CMD ["node", "app.js"]


================================================
File: /utils/logger.js
================================================
// utils/logger.js
const winston = require("winston");

const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.colorize(),
    winston.format.timestamp(),
    winston.format.printf(
      ({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`
    )
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: "logs/app.log" })
  ]
});

module.exports = logger;


================================================
File: /models/FarmerDetails.js
================================================
// models/FarmerDetails.js
const { DataTypes } = require("sequelize");
const sequelize = require("../config/database");
const User = require("./User");

const FarmerDetails = sequelize.define("FarmerDetails", {
  user_id: {
    type: DataTypes.INTEGER,
    references: {
      model: User,
      key: "id",
    },
  },
  age: DataTypes.INTEGER,
  vision_problems: DataTypes.BOOLEAN,
  color_blindness: DataTypes.BOOLEAN,
  lat : DataTypes.STRING,
  long : DataTypes.STRING,
});

module.exports = FarmerDetails;


================================================
File: /models/User.js
================================================
// models/User.js
const { DataTypes } = require("sequelize");
const sequelize = require("../config/database");

const User = sequelize.define("User", {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  username: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
  },
  password_hash: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  role: {
    type: DataTypes.ENUM('FARMER', 'ADMIN'),
    allowNull: false,
    defaultValue: 'FARMER',
    validate: {
      isIn: [['FARMER', 'ADMIN']]
    }
  }
});

module.exports = User;

================================================
File: /models/AccessibilitySettings.js
================================================
// models/AccessibilitySettings.js
const { DataTypes } = require("sequelize");
const sequelize = require("../config/database");
const User = require("./User");

const AccessibilitySettings = sequelize.define("AccessibilitySettings", {
  user_id: {
    type: DataTypes.INTEGER,
    references: {
      model: User,
      key: "id",
    },
  },
  text_size: DataTypes.STRING,
  layout: DataTypes.STRING,
  color_friendly_scheme: DataTypes.STRING,
  use_symbols_with_colors: DataTypes.BOOLEAN,
});

module.exports = AccessibilitySettings;


================================================
File: /package.json
================================================
{
  "name": "user_service",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "test": "jest --detectOpenHandles --forceExit",
    "test:watch": "jest --watch",
    "dev": "nodemon app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "jest": "^29.7.0",
    "jest-junit": "^16.0.0",
    "mockdate": "^3.0.5",
    "nodemon": "^3.1.9",
    "supertest": "^7.0.0"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.13.1",
    "pg-hstore": "^2.3.4",
    "react-leaflet": "^5.0.0",
    "sequelize": "^6.37.5",
    "winston": "^3.17.0"
  }
}


================================================
File: /service/userService.js
================================================
// service/userService.js
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const userRepo = require("../repository/userRepo");
const FarmerDetails = require("../models/FarmerDetails");

require("dotenv").config();

// Generate JWT token
const generateToken = (user) => {
  return jwt.sign(user, process.env.JWT_SECRET || "defaultsecret", {
    expiresIn: process.env.JWT_EXPIRES_IN || "1h",
  });
};

// Register user
const registerUser = async (username, email, password) => {
  try {
    const existingUser = await userRepo.findUserByEmail(email);
    if (existingUser) {
      return { success: false, statusCode: 400, message: "User already exists" };
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await userRepo.createUser(username, email, hashedPassword , "ADMIN");

    return {
      success: true,
      data: { id: newUser.id, username, email },
      message: "User created successfully",
    };
  } catch (error) {
    console.error("Error in registration service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Login user
const loginUser = async (email, password) => {
  try {
    const user = await userRepo.findUserByEmail(email);
    if (!user) {
      return { success: false, statusCode: 404, message: "User not found" };
    }
  
    const famer = await FarmerDetails.findOne({ where: { user_id: user.id } });
    

    const validPassword = await bcrypt.compare(password, user.password_hash);
    if (!validPassword) {
      return { success: false, statusCode: 400, message: "Invalid password" };
    }

    const token = generateToken({ id: user.id, email: user.email , username: user.username , age : famer?.age ? famer?.age : 0 , visionProblems : famer?.vision_problems ? famer?.vision_problems : false , colorBlindness : famer?.color_blindness ? famer?.color_blindness : false });

    delete user.password_hash;

    return {
      success: true,
      data: { token , user , famer},
      message: "Login successful",
    };
  } catch (error) {
    console.error("Error in login service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Register farmer with preferences
const registerFarmer = async (username, email, password, age, visionProblems, colorBlindness, textSize, layout, colorScheme, useSymbols , lat , long) => {
  try {
    const existingUser = await userRepo.findUserByEmail(email);
    if (existingUser) {
      return { success: false, statusCode: 400, message: "User already exists" };
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await userRepo.createUser(username, email, hashedPassword , "FARMER");
    const userId = newUser.id;

    await userRepo.createFarmerDetails(userId, age, visionProblems, colorBlindness , lat , long);
    await userRepo.createAccessibilitySettings(userId, textSize, layout, colorScheme, useSymbols);

    return {
      success: true,
      data: { id: userId, username, email },
      message: "Farmer registered successfully",
    };
  } catch (error) {
    console.error("Error in farmer registration service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Get user preferences
const getUserPreferences = async (userId) => {
  try {
    const preferences = await userRepo.getUserPreferences(userId);
    if (!preferences) {
      return { success: false, statusCode: 404, message: "Preferences not found" };
    }

    return { success: true, data: preferences, message: "Preferences fetched successfully" };
  } catch (error) {
    console.error("Error in fetching preferences service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// userService.js
const getAllUsers = async (page, limit) => {
  try {
    const result = await userRepo.findAllUsers(parseInt(page), parseInt(limit));
    return {
      success: true,
      data: {
        users: result.users,
        meta: {
          totalUsers: result.totalUsers,
          totalPages: result.totalPages,
          currentPage: result.currentPage,
          limit: parseInt(limit)
        }
      },
      message: "Users fetched successfully",
    };
  } catch (error) {
    console.error("Error in fetching users service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Get one user
const getUser = async (userId) => {
  try {
    const user = await userRepo.findUserById(userId);
    if (!user) {
      return { success: false, statusCode: 404, message: "User not found" };
    }

    return {
      success: true,
      data: user,
      message: "User fetched successfully",
    };
  } catch (error) {
    console.error("Error in fetching user service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Update user
const updateUser = async (userId, updateData) => {
  try {
    const user = await userRepo.findUserById(userId);
    if (!user) {
      return { success: false, statusCode: 404, message: "User not found" };
    }

    const updatedUser = await userRepo.updateUser(userId, updateData);
    return {
      success: true,
      data: updatedUser,
      message: "User updated successfully",
    };
  } catch (error) {
    console.error("Error in updating user service:", error);
    return { success: false, statusCode: 500, message: "Server error" };
  }
};

// Add to exports
module.exports = {
  registerUser,
  loginUser,
  registerFarmer,
  getUserPreferences,
  getAllUsers, 
  getUser,
  updateUser,
};

================================================
File: /controllers/userController.js
================================================
const userService = require("../service/userService");

// Register User
const register = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const result = await userService.registerUser(username, email, password);
    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }

    return res.status(201).json(result);
  } catch (error) {
    console.error("Error in registration:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};




// Login User
const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await userService.loginUser(email, password);
    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }

    return res.status(200).json(result);
  } catch (error) {
    console.error("Error in login:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Register Farmer with Preferences
const registerFarmer = async (req, res) => {
  const {
    username,
    email,
    password,
    age,
    vision_problems,
    color_blindness,
    text_size,
    layout,
    color_friendly_scheme,
    use_symbols_with_colors,
    lat,
    long
  } = req.body;

  try {
    const result = await userService.registerFarmer(
      username,
      email,
      password,
      age,
      vision_problems,
      color_blindness,
      text_size,
      layout,
      color_friendly_scheme,
      use_symbols_with_colors,
      lat,
      long
    );

    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }

    return res.status(201).json(result);
  } catch (error) {
    console.error("Error in farmer registration:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Get User Preferences
const getUserPreferences = async (req, res) => {
  const { userId } = req.params;

  try {
    const result = await userService.getUserPreferences(userId);

    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }

    return res.status(200).json(result);
  } catch (error) {
    console.error("Error fetching preferences:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Token Validation Route
const validateToken = async (req, res) => {
  const authHeader = req.headers["authorization"];

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({
      data: null,
      message: "Unauthorized",
      success: false,
    });
  }

  const token = authHeader.split(" ")[1];

  try {
    const user = jwt.verify(token, process.env.JWT_SECRET || "defaultsecret");
    return res.status(200).json({
      data: user,
      message: "Token is valid",
      success: true,
    });
  } catch (error) {
    console.error("Error in token validation:", error);
    return res.status(403).json({
      data: null,
      message: "Invalid or expired token",
      success: false,
    });
  }
};


const getAllUsers = async (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  
  try {
    const result = await userService.getAllUsers(page, limit);
    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }
    return res.status(200).json(result);
  } catch (error) {
    console.error("Error fetching users:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Get One User
const getUser = async (req, res) => {
  const { userId } = req.params;
  try {
    const result = await userService.getUser(userId);
    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }
    return res.status(200).json(result);
  } catch (error) {
    console.error("Error fetching user:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Update User
const updateUser = async (req, res) => {
  const { userId } = req.params;
  const updateData = req.body;
  try {
    const result = await userService.updateUser(userId, updateData);
    if (!result.success) {
      return res.status(result.statusCode).json(result);
    }
    return res.status(200).json(result);
  } catch (error) {
    console.error("Error updating user:", error);
    return res.status(500).json({
      data: null,
      message: "Server error",
      success: false,
    });
  }
};

// Add to exports
module.exports = {
  register,
  login,
  registerFarmer,
  getUserPreferences,
  validateToken,
  getAllUsers, 
  getUser,
  updateUser,
};

================================================
File: /routes/authRoutes.js
================================================
const express = require("express");
const userController = require("../controllers/userController");
const protect = require("../middleware/protect");

const router = express.Router();

// Register User
router.post("/register-admin", userController.register);

// Add this to your existing router file
router.get("/users", userController.getAllUsers);

// Login User
router.post("/login", userController.login);

// Register Farmer with Preferences
router.post("/register-farmer",   userController.registerFarmer);

// Get User Preferences
router.get("/preferences/:userId", protect ,  userController.getUserPreferences);

// Token Validation Route
router.get("/validate", userController.validateToken);

router.get("/users/:userId", protect, userController.getUser);

router.put("/users/:userId", protect, userController.updateUser);

module.exports = router;


================================================
File: /app.js
================================================
// server.js
const express = require("express");
const cors = require("cors");
const authRoutes = require("./routes/authRoutes");
const logger = require("./utils/logger"); 

require("dotenv").config();
const sequelize = require("./config/database");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use("/auth", authRoutes);

// health check
app.get("/health", (req, res) => {
  res.json({ message: "User Service is running" });
});

// Syncing the database with logging
sequelize.sync({ alter: true })
  .then(() => {
    logger.info("Database synced successfully.");
  })
  .catch((error) => {
    logger.error(`Database sync error: ${error.message}`);
  });

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  logger.info(`Server running on port ${PORT}`);
});


